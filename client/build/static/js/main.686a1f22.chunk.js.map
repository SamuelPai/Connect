{"version":3,"sources":["logo.svg","components/Home/Home.component.js","components/About/About.component.js","utils/API.js","pages/CheeseDetail/CheeseDetail.component.js","pages/ExamplePage/ExamplePage.propTypes.js","components/ReactRouterDetails/ReactRouterDetails.propTypes.js","components/ReactRouterDetails/ReactRouterDetails.component.js","pages/ExamplePage/ExamplePage.component.js","components/NoMatch/NoMatch.component.js","pages/LandingPage/LandingPage.propTypes.js","pages/LandingPage/LandingPage.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","Alert","color","href","className","About","Card","CardBody","CardTitle","CardSubtitle","width","src","alt","CardText","CardLink","API","cheeseId","console","log","axios","get","CheeseDetail","state","cheese","name","price","description","id","this","match","params","CheeseApi","getCheeseById","then","res","data","setState","catch","err","React","Component","ExamplePageProps","ReactRouterPropTypes","location","isRequired","history","ReactRouterDetailsPropTypes","ReactRouterDetails","objectTable","object","Object","keys","map","key","defaultProps","ExamplePage","prevProps","prevState","prevSnapshot","url","NoMatch","Jumbotron","fluid","Container","LandingPageProps","LandingPage","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.686a1f22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { Alert } from 'reactstrap';\n\nexport const Home = props => {\n\treturn (\n\t\t<Alert color=\"primary\">\n\t\t\tThis is a alert with <a href=\"#\" className=\"alert-link\">an example link</a>. Give it a click if you like.\n\t\t</Alert>\n\t);\n};","import React from 'react';\nimport {\n  Card, CardImg, CardText, CardBody, CardLink,\n  CardTitle, CardSubtitle\n} from 'reactstrap';\n\nexport const About = (props) => {\n  return (\n    <div>\n      <Card>\n        <CardBody>\n          <CardTitle>Card title</CardTitle>\n          <CardSubtitle>Card subtitle</CardSubtitle>\n        </CardBody>\n        <img width=\"100%\" src=\"/assets/318x180.svg\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n          <CardLink href=\"#\">Card Link</CardLink>\n          <CardLink href=\"#\">Another Link</CardLink>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};","import axios from 'axios';\n\nexport default class API {\n\tstatic getCheeseById(cheeseId) {\n\t\tconsole.log('getCheeseById(cheeseId)', cheeseId);\n\t\treturn axios.get(`/api/cheese/${cheeseId}`);\n\t}\n}","import React from 'react';\nimport CheeseApi from '../../utils/API';\n\n\nexport class CheeseDetail extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcheese: {\n\t\t\t\tname: 'No Cheese',\n\t\t\t\tprice: 0,\n\t\t\t\tdescription: 'loading...'\n\t\t\t},\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst {\n\t\t\tid\n\t\t} = this.props.match.params;\n\t\tif (id) {\n\t\t\tCheeseApi.getCheeseById(id)\n\t\t\t\t.then(res => {\n\t\t\t\t\tconsole.log('cheese', res.data)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcheese: res.data,\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log(`ERR - Could not load cheese id: ${id}`, err);\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcheese: {\n\t\t\t\t\t\t\tname: \"Smelly Cheese\",\n\t\t\t\t\t\t\tprice: 1000,\n\t\t\t\t\t\t\tdescription: \"The stinkiest of sinky cheese\",\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t\t\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Welcome to CheeseDetail {this.props.match.params.id || \"Unknown\"}</h1>\n\t\t\t\t<h2>{ this.state.cheese.name } - ${this.state.cheese.price / 100}</h2>\n\t\t\t\t<p>{ this.state.cheese.description }</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n","import ReactRouterPropTypes from 'react-router-prop-types';\n\nexport const ExamplePageProps = {\n  propTypes: {\n    location: ReactRouterPropTypes.location.isRequired,\n    history: ReactRouterPropTypes.history.isRequired,\n    match: ReactRouterPropTypes.match.isRequired,\n  },\n  defaultProps: {}\n};\n","import PropTypes from 'prop-types';\nimport ReactRouterPropTypes from 'react-router-prop-types';\n\nexport const ReactRouterDetailsPropTypes = {\n    propTypes: {\n        location: ReactRouterPropTypes.location.isRequired,\n        history: ReactRouterPropTypes.history.isRequired,\n        match: ReactRouterPropTypes.match.isRequired,\n    },\n    defaultProps: {}\n};\n","import React from 'react';\nimport { ReactRouterDetailsPropTypes } from './ReactRouterDetails.propTypes';\nimport styles from './ReactRouterDetails.styles.scss';\n\nexport const ReactRouterDetails = props => {\n  const objectTable = object => {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Key</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(object).map(key => {\n            return (\n              <tr key={key}>\n                <td>{ key }</td>\n                <td>{ typeof object[key] === 'object' ? objectTable(object[key]) : object[key] }</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  };\n\n  return (\n    <div>\n      <h1>React Router Details</h1>\n      <h2>this.props.location</h2>\n      {objectTable(props.location)}\n      <h2>this.props.history</h2>\n      {objectTable(props.history)}\n      <h2>this.props.match</h2>\n      {objectTable(props.match)}\n    </div>\n  );\n};\n\nReactRouterDetails.propTypes = ReactRouterDetailsPropTypes.propTypes;\nReactRouterDetails.defaultProps = ReactRouterDetailsPropTypes.defaultProps;\n","import React from 'react';\nimport { ExamplePageProps } from './ExamplePage.propTypes'\nimport { ReactRouterDetails } from '../../components/ReactRouterDetails/ReactRouterDetails.component';\nimport styles from './ExamplePage.styles.scss';\n\nexport class ExamplePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount()', this.props);\n  }\n\n  componentDidUpdate(prevProps, prevState, prevSnapshot) {\n    console.log('componentDidUpdate(prevProps, prevState, prevSnapshot)', prevProps, prevState, prevSnapshot);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Example Page (Route: {this.props.match.url})</h1>\n        <ReactRouterDetails\n          location={this.props.location}\n          history={this.props.history}\n          match={this.props.match}\n        />\n      </div>\n    );\n  }\n}\n\nExamplePage.propTypes = ExamplePageProps.propTypes;\nExamplePage.defaultProps = ExamplePageProps.defaultProps;\n","import React from 'react';\nimport { Jumbotron, Container } from 'reactstrap';\n\nexport const NoMatch = props => {\n\treturn (\n\t\t<div>\n\t\t\t<Jumbotron fluid>\n        <Container fluid>\n          <h1 className=\"display-3\">404 - Can't sit here!</h1>\n          <p className=\"lead\">Seat's taken :(</p>\n        </Container>\n      </Jumbotron>\n\t\t</div>\n\t);\n};","import ReactRouterPropTypes from 'react-router-prop-types';\n\nexport const LandingPageProps = {\n  propTypes: {\n    location: ReactRouterPropTypes.location.isRequired,\n    history: ReactRouterPropTypes.history.isRequired,\n    match: ReactRouterPropTypes.match.isRequired,\n  },\n  defaultProps: {}\n};\n","import React from 'react';\nimport { LandingPageProps } from './LandingPage.propTypes'\nimport { ReactRouterDetails } from '../../components/ReactRouterDetails/ReactRouterDetails.component';\nimport styles from './LandingPage.styles.scss';\n\nexport class LandingPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount()', this.props);\n  }\n\n  componentDidUpdate(prevProps, prevState, prevSnapshot) {\n    console.log('componentDidUpdate(prevProps, prevState, prevSnapshot)', prevProps, prevState, prevSnapshot);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Landing Page (Route: {this.props.match.url})</h1>\n        <ReactRouterDetails\n          location={this.props.location}\n          history={this.props.history}\n          match={this.props.match}\n        />\n      </div>\n    );\n  }\n}\n\nLandingPage.propTypes = LandingPageProps.propTypes;\nLandingPage.defaultProps = LandingPageProps.defaultProps;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Home } from './components/Home/Home.component';\nimport { About } from './components/About/About.component';\nimport { CheeseDetail } from './pages/CheeseDetail/CheeseDetail.component';\nimport { ExamplePage } from './pages/ExamplePage/ExamplePage.component';\nimport { NoMatch } from './components/NoMatch';\nimport { LandingPage } from './pages/LandingPage/LandingPage.component';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/about\" component={About} />\n        <Route exact path=\"/cheese/:id\" component={CheeseDetail} />\n        <Route exact path=\"/example/:id\" component={ExamplePage} />\n        <Route exact path=\"/landing\" component={LandingPage} />\n        <Route component={NoMatch} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}