"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var React = __importStar(require("react"));
var theming_1 = require("@storybook/theming");
var components_1 = require("@storybook/components");
var fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
var Sun_1 = __importDefault(require("./icons/Sun"));
var Moon_1 = __importDefault(require("./icons/Moon"));
var defaultStore = {
    current: 'light',
    dark: theming_1.themes.dark,
    light: theming_1.themes.light
};
var update = function (newStore) {
    window.localStorage.setItem('sb-addon-themes-3', JSON.stringify(newStore));
};
var store = function (themes) {
    if (themes === void 0) { themes = {}; }
    if (window.localStorage.getItem('sb-addon-themes-3')) {
        var stored = JSON.parse(window.localStorage.getItem('sb-addon-themes-3'));
        if (themes) {
            if (themes.dark && !fast_deep_equal_1["default"](stored.dark, themes.dark)) {
                stored.dark = themes.dark;
                update(stored);
            }
            if (themes.light && !fast_deep_equal_1["default"](stored.light, themes.light)) {
                stored.light = themes.light;
                update(stored);
            }
        }
        return stored;
    }
    defaultStore = __assign(__assign({}, defaultStore), themes);
    return defaultStore;
};
exports.DarkMode = function (props) {
    var _a = __read(React.useState(false), 2), isDark = _a[0], setDark = _a[1];
    function setDarkMode() {
        var currentStore = store();
        var current = currentStore.current === 'dark' ? 'light' : 'dark';
        update(__assign(__assign({}, currentStore), { current: current }));
        props.api.setOptions({ theme: currentStore[current] });
        setDark(!isDark);
        props.api.getChannel().emit('DARK_MODE', !isDark);
    }
    function renderTheme() {
        var data = props.api.getCurrentStoryData();
        if (!('parameters' in data)) {
            return;
        }
        var parameters = data.parameters;
        var darkTheme = theming_1.themes.dark;
        var lightTheme = theming_1.themes.light;
        if (parameters && parameters.darkMode) {
            darkTheme = parameters.darkMode.dark || darkTheme;
            lightTheme = parameters.darkMode.light || lightTheme;
        }
        var currentStore = store({
            light: lightTheme,
            dark: darkTheme
        });
        var current = currentStore.current;
        props.api.setOptions({ theme: currentStore[current] });
        setDark(current === 'dark');
        props.api.getChannel().emit('DARK_MODE', current === 'dark');
    }
    React.useEffect(function () {
        var channel = props.api.getChannel();
        channel.on('storyChanged', renderTheme);
        channel.on('storiesConfigured', renderTheme);
        channel.on('docsRendered', renderTheme);
        return function () {
            channel.removeListener('storyChanged', renderTheme);
            channel.removeListener('storiesConfigured', renderTheme);
            channel.removeListener('docsRendered', renderTheme);
        };
    });
    return (React.createElement(components_1.IconButton, { key: "dark-mode", active: isDark, title: isDark ? 'Change theme to light mode' : 'Change theme to dark mode', onClick: setDarkMode }, isDark ? React.createElement(Sun_1["default"], null) : React.createElement(Moon_1["default"], null)));
};
exports["default"] = exports.DarkMode;
//# sourceMappingURL=Tool.js.map