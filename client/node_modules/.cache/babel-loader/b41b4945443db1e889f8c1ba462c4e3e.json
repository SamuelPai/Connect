{"ast":null,"code":"'use strict';\n\nvar template = require('string-template');\n\nvar assert = require('assert');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar isWordBoundary = /[_.-](\\w|$)/g;\nvar FUNCTION_FIELD_WHITELIST = Object.getOwnPropertyNames(TypedError);\nmodule.exports = TypedError;\n\nfunction TypedError(args) {\n  assert(args, 'TypedError: must specify options');\n  assert(args.type, 'TypedError: must specify options.type');\n  assert(args.message, 'TypedError: must specify options.message');\n  assert(!has(args, 'fullType'), 'TypedError: fullType field is reserved');\n  var message = args.message;\n  var funcName = args.name;\n\n  if (!funcName) {\n    var errorName = camelCase(args.type) + 'Error';\n    funcName = errorName[0].toUpperCase() + errorName.substr(1);\n  }\n\n  var copyArgs = {};\n  extend(copyArgs, args);\n\n  for (var i = 0; i < FUNCTION_FIELD_WHITELIST.length; i++) {\n    delete copyArgs[FUNCTION_FIELD_WHITELIST[i]];\n  }\n\n  extend(createError, copyArgs);\n  createError._name = funcName;\n  return createError;\n\n  function createError(opts) {\n    var result = new Error();\n    Object.defineProperty(result, 'type', {\n      value: result.type,\n      enumerable: true,\n      writable: true,\n      configurable: true\n    });\n    var options = {};\n    extend(options, args);\n    extend(options, opts);\n\n    if (!options.fullType) {\n      options.fullType = options.type;\n    }\n\n    result.name = funcName;\n    extend(result, options);\n\n    if (opts && opts.message) {\n      result.message = template(opts.message, options);\n    } else if (message) {\n      result.message = template(message, options);\n    }\n\n    return result;\n  }\n}\n\nfunction extend(target, source) {\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\nfunction camelCase(str) {\n  return str.replace(isWordBoundary, upperCase);\n}\n\nfunction upperCase(_, x) {\n  return x.toUpperCase();\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}","map":null,"metadata":{},"sourceType":"script"}